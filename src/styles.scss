@use 'sass:map';
@use '@angular/material' as mat;
@use 'styles/functions/functions' as Fnc;
@use 'styles/debug' as *;
@use 'styles/constants' as *;
@use 'styles/core' as core;

@import 'https://fonts.googleapis.com/icon?family=Material+Icons+Round';
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');


//# Mat Core //
@include mat.core($fontConfig);


// # Typography  //
@include core.set-typographies($fontConfig);

@include debug-map($fontConfig); 




// ? Adjustable
// ? Actually whenever the theme changes just change a variable here globaly that changes the current theme ?
@mixin adjustable($theme) {
  
  hr {
    border: none;
    outline: none;
    background: map.get($theme, foreground, base);
    
    &.horizontal {
      width: 100%;
      height: 1px;
    }
    
    &.vertical {
      width: 1px;
      height: 100%;
    }
  }
}



// # Theme  //

// - Light Theme
.theme-alternate {
  @include theme-light-theme;
  @include adjustable($current-theme)
}

// - Dark Theme (Default)
@include theme-dark-theme;


// # Theme Sensitive  //
@include adjustable($theme);
@include theme-set-css-variables;
// ===========



// @include debug-map($current-theme);











//# Globals
//* ========= GLOBAL MIXINS
@include mix-no-defaults;

* {
  @include mix-scrollbar($current-theme);
}

//* ========= GLOBAL TAGS
html,
body {
	height: 100%;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}

body {
  min-width: 100vw;
  min-height: 100vh;
  width: 100%;
  height: 100%;
  /* Backup (100vh) support for Safari bug */
  min-height: -webkit-fill-available;
  overflow: hidden;
  
  app-root {
    display: block;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
}

button {
	display: flex;
	justify-content: center;
	align-items: center;
	outline: none;
	border: none;
	background: unset;
	color: inherit;
	font: inherit;
	cursor: pointer;
}

//* ========= GLOBAL CLASSES
main.main-content {
	display: block;
	width: 100%;
	height: 100%;
  overflow: hidden;
  // overscroll-behavior: ;
}

//* ========= ROOT
:root {
	/* CSS Variables */
  $primary-map: map.get($current-theme, primary);
  @include mix-map-to-css-variables($primary-map, theme);
}
